% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/places and rays fcns.R
\name{Count.rays}
\alias{Count.rays}
\title{Count.rays}
\usage{
Count.rays(
  place.geoid,
  hwy.sf,
  remove.holes = FALSE,
  place.sf = largest.plc.in.cz,
  ...
)
}
\arguments{
\item{remove.holes}{Remove holes from places before counting rays. If a hwy
starts/ends in a hole, it will be counted as a ray unless this is set to TRUE}

\item{always.include}{Type(s) of highways to always include for ray measure if
\code{include.intersecting} is false. By default only interstates}

\item{include.intersecting}{Whether or not to include additional highway types if
they intersect with one or more of the core/always included hwy types.}

\item{hwy.types}{Other types of hwys to include if and only if they intersect with
the core, "always.included" type(s). Only relevant if
\code{include.intersecting} is true. No filter applied if left as NULL
(default).}

\item{buffer.meters}{Amount of padding around the Place to retain when trimming
highways to place and surrounding area. Defaults to 300 meters.}

\item{minimum.segment.length}{Minimum length (meters) that each highway ~segment~
must have in order to be eligible for rays, This differs from
\code{minimum.hwy.length} in that it counts each separate}

\item{minimum.hwy.length}{Minimum length of each ~highway~ that must be inside
place boundaries for it to be ray-eligible. Differs from minimum.segment.length
in that at least one segment of hwy must meet this threshold for ~any~ of the
segments to be eligible. Only relevant if larger than minimum.segment.length and}

\item{fill.gaps}{whether or not to fill gaps between highway segments. Argument
\code{threshold} can also be supplied specify maximum gap distance to fill gap
btwn.}

\item{verbose}{Display additional text output in console. Makes explicit some
parameters that are passed to wrapped fcns and will say where ineligible rays
are removed due to issue described above.}
}
\description{
given the geoid of a place and sf objects containing hwy information and place
information, this calls each step to count the rays. Returns the number of rays
for the place and a map of them. Arguments are passed to wrapped fcns. Additional
arguments can also be passed to mapview::mapview to change appearance of output
map.
}
